//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"



#include "roundrobin.h"
Roundrobinsystem roundRobin;


TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{

}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{



	//Label1->Caption = (object.getPlayer(0).getName()).c_str();
	//std::string have to be converted to Unicode String. std::stringVariable.c_str(); helps



	Button1->Left = (Form1->Width - Button1->Width)/2;
	Button2->Left = Button1 -> Left;
	Button3->Left = Button1 -> Left;

	Button1->Top  = 100;
	Button2 -> Top = Button1 -> Top + Button1 -> Height + 20;
	Button3 -> Top = Button2 -> Top + Button2 -> Height + 20;

	Button4 -> Visible = false;
	Button4 -> Enabled = false;

	Button5 -> Visible = false;
	Button5 -> Enabled = false;

	Button6 -> Visible = false;
	Button6 -> Enabled = false;

	Edit1 -> Visible = false;
	Edit1 -> Enabled = false;

	PlayersList -> Width = (Form1 -> Width - 100);
	PlayersList -> Left = 45;

	PlayersList -> Top = 100;
	PlayersList -> Height =Edit1 -> Top - 150;
}
//---------------------------------------------------------------------------




void __fastcall TForm1::Button1Click(TObject *Sender)
{
	Button1 -> Visible = false;
	Button1 -> Enabled = false;

	Button2 -> Visible = false;
	Button2 -> Enabled = false;

	Button3 -> Visible = false;
	Button3 -> Enabled = false;

	Button4 -> Left = (Form1->Width - Button4->Width)/2;
	Button4 -> Top  = 100;



	Button5 -> Left = (Form1->Width - Button5->Width)/2;
	Button5 -> Top = Button1 -> Top + Button4 -> Height + 20;

	Button6 -> Left = (Form1->Width - Button6->Width)/2;
	Button6 -> Top = Button5 -> Top + Button2 -> Height + 20;

	Button4 -> Visible = true;
	Button4 -> Enabled = true;

	Button5 -> Visible = true;
	Button5 -> Enabled = true;

	Button6 -> Visible = true;
	Button6 -> Enabled = true;

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button6Click(TObject *Sender)
{
	Button1 -> Visible = true;
	Button1 -> Enabled = true;

	Button2 -> Visible = true;
	Button2 -> Enabled = true;

	Button3 -> Visible = true;
	Button3 -> Enabled = true;

	Button4 -> Visible = false;
	Button4 -> Enabled = false;

	Button5 -> Visible = false;
	Button5 -> Enabled = false;

	Button6 -> Visible = false;
	Button6 -> Enabled = false;


}
//---------------------------------------------------------------------------


void __fastcall TForm1::Button4Click(TObject *Sender)
{
	Button4 -> Visible = false;
	Button4 -> Enabled = false;

	Button5 -> Visible = false;
	Button5 -> Enabled = false;

	Button6 -> Visible = false;
	Button6 -> Enabled = false;

	Edit1 -> Visible = true;
	Edit1 -> Enabled = true;

	PlayersList -> Visible = true;

	Button7 -> Visible = true;
	Button7 -> Enabled = true;
}
//---------------------------------------------------------------------------







void __fastcall TForm1::Edit1KeyPress(TObject *Sender, System::WideChar &Key)
{	//Causes an Error sound on enter key even though its working

  if( Key == VK_RETURN)
	{
		PlayersList -> Lines -> Clear();

		PlayersList -> Lines -> Append("Current Players:");

		AnsiString tempString = Edit1 -> Text;

		roundRobin.addPlayer(tempString.c_str());  // This kind of juggling might be simlified?

		for(int i = 0; i < roundRobin.getSize(); i++)
		PlayersList -> Lines -> Append(roundRobin.getPlayer(i) -> getName().c_str());

		Edit1 -> Text = "";

		if (roundRobin.getSize() > 18)
		{
			ShowMessage("The tournament is getting long! Are you sure you want this system for so many players?");
		}

	}
}
//---------------------------------------------------------------------------


void __fastcall TForm1::Button7Click(TObject *Sender)
{
	if(roundRobin.getSize()%2 == 1)
	{
		roundRobin.addVirtual();
	}

	Edit1 -> Enabled = false;
	Form2 -> Visible = true;


	for(int i = 0; i < roundRobin.getSize() / 2; i++)
	{
		AnsiString temp = roundRobin.getPlayer(i) -> getName().c_str();
		temp += " - ";
		temp += roundRobin.getPlayer(roundRobin.getSize()-1-i) -> getName().c_str();

		Form2 -> ComboBox1 -> Items -> Append(temp);
        Form2 -> ComboBox1 -> Tag = int(&roundRobin);
	}

}
//---------------------------------------------------------------------------


